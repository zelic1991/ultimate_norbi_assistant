param(
  [string]$SpecPath = "$(Join-Path $PSScriptRoot '..\prompts\example_spec.md')",
  [string]$OutDir   = "$(Join-Path (Split-Path -Parent (Split-Path -Parent $PSScriptRoot)) 'PLAYGROUND\demo_project')",
  [switch]$Dry
)
$ErrorActionPreference = 'Stop'
if (-not (Test-Path $SpecPath)) { throw "Spec fehlt: $SpecPath" }
$spec = Get-Content $SpecPath -Raw
New-Item -ItemType Directory -Force $OutDir | Out-Null

$plan = @()
$plan += "PLAN:"
$plan += "- Zielordner: $OutDir"
$plan += "- Artefakte: README.md, main.py (oder index.ts), policy_lock.json"
$plan += "- Modus: " + ($(if($Dry){"PREVIEW"}else{"APPLY"}))

if ($Dry) {
  $plan -join "`n" | Write-Host
} else {
  "# Generated by CodeOps (skeleton)" | Set-Content -Encoding UTF8 (Join-Path $OutDir "README.md")
  "print('hello from skeleton')"      | Set-Content -Encoding UTF8 (Join-Path $OutDir "main.py")
  "{`"guardrails`":{`"no_write_outside_allow_dirs`":true}}" | Set-Content -Encoding UTF8 (Join-Path $OutDir "policy_lock.json")
  "OK: Skeleton geschrieben nach $OutDir" | Write-Host
}
